generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Subscription {
  id                String    @id @default(cuid())
  user_email        String    @unique
  user_clerk_id     String    @unique
  sub_status        String    @default("inactive")
  sub_type          String    @default("free")
  end_date          DateTime?
  last_stripe_cs_id String?
  stripe_customer_id String?
  sub_stripe_id     String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  user              User      @relation(fields: [user_clerk_id], references: [clerk_id])
  extensions        SubscriptionExtension[]
}

model Project {
  id            String  @id @default(uuid())
  connection_id String
  webhook_id    String
  scenario_id   String
  assistant_id  String?
  user_clerk_id String
  type          String
  status        String  @default("default")
  webhook_link  String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Audiences {
  id        String @id @default(uuid())
  resend_id String @unique
  name      String
}

enum SubscriptionStatus {
  active
  inactive
}

model SubscriptionExtension {
  id              String    @id @default(cuid())
  subscription_id String
  extended_by     String
  previous_end    DateTime
  new_end         DateTime
  duration_days   Int
  reason          String?
  created_at      DateTime  @default(now())
  subscription    Subscription @relation(fields: [subscription_id], references: [id])
  admin           User         @relation("ExtendedBy", fields: [extended_by], references: [clerk_id])
}

model Appointment {
  id          String    @id @default(cuid())
  user_id     String
  start_time  DateTime
  end_time    DateTime
  status      String    @default("pending") // pending, confirmed, cancelled
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [clerk_id])
}

model User {
  id                    String    @id @default(cuid())
  clerk_id              String    @unique
  email                 String    @unique
  name                  String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  subscription          Subscription?
  extended_subscriptions SubscriptionExtension[] @relation("ExtendedBy")
  appointments          Appointment[]
}
